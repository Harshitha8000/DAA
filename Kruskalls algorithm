#include<stdio.h>
void krushkal(int cost[20][20],int n,int edges,int t[20][2]);
int find(int i);
void uni(int i,int j);
int parent[20];
int main()
{
    int cost[20][20],t[20][2],n,i,j,edges=0;
    printf("Enter Number of vertices of graph:");
    scanf("%d",&n);
    printf("Enter cost adjacency matrix of graph:");
    for(i=1;i<=n;i++)
    {
       for(j=1;j<=n;j++)
       {
          scanf("%d",&cost[i][j]); 
          if(cost[i][j]==0)
            cost[i][j]=999;
          else
            edges++;
       }
    }
    edges=edges/2;
    krushkal(cost,n,edges,t);
}
void krushkal(int cost[20][20],int n,int edges,int t[20][2])
{ 
    int i,j,k,u,v,m,mincost,min;
    for(i=1;i<=n;i++)
       parent[i]=-1;
    mincost=0;
    m=0;
    for(i=1;i<=edges;i++)
    {
        min=999;
        for(j=1;j<=n;j++)
        {
            for(k=1;k<=n;k++)
            {
                if(cost[j][k]<min)
                {
                    min=cost[j][k];
                    u=j;
                    v=k;
                }
            }
        }
        j=find(u);
        k=find(v);
        if(j!=k)
        {
            m++;
            t[m][1]=u;
            t[m][2]=v;
            mincost=mincost+cost[u][v];
            uni(j,k);
        }
        cost[u][v]=cost[v][u]=999;
    }
    printf("The Minimum spanning tree is\n");
    for(i=1;i<=m;i++)
    {
        for(j=1;j<=2;j++)
        {
            printf("%d ",t[i][j]);
        }
        printf("\n");
    }
    printf("The Minimum cost of spanning tree is %d",mincost);
  }
int find(int i)		
{		
    while(parent[i]!=-1)		      
    {
        i=parent[i];		
    }
    return i;
  }
  
void uni(int i,int j)
{
    parent[j]=i;
}
