#include<stdio.h>
int n,m,l;
int min(int a[20][20],int p,int q)
{
	int i,j,mi=a[p][q];
	for(i=1;i<=n;i++){
	for(j=1;j<=n;j++){
		if ((a[i][j]!=99)&&(a[i][j]!=0)&&(a[i][j]<mi)){
		mi=a[i][j];
		m=i;
		l=j;}
	}
      }
}
int prims(int cost[20][20],int n)
{
	int mincost,near[20],i,j,k,t[20][2];
	for(j=1;j<=n;j++)
		if (cost[1][j]!=0&&cost[1][j]!=99)
		break;
	min(cost,1,j);
	mincost=cost[m][l];
	t[1][1]=m,t[1][2]=l;
	for(i=1;i<=n;i++){
	if(cost[i][m]<cost[i][l])
	near[i]=m;
	else
	near[i]=l;}
	near[m]=0,near[l]=0;
	for(i=2;i<=n-1;i++)
	{
		int mini=999;
		for(j=1;j<=n;j++){
		if(near[j]!=0&&cost[j][near[j]]!=0&&cost[j][near[j]]<mini){
			mini=cost[j][near[j]];
			m=j;
		}}
		t[i][1]=m,t[i][2]=near[m];
		mincost=mincost+cost[m][near[m]];
		near[m]=0;
		for(k=1;k<=n;k++)
		if(cost[k][near[k]]>cost[k][m]&&near[k]!=0)
		near[k]=m;
	}
	return mincost;	
}
main()
{
	int i,j,r,cost[20][20];
	printf("enter no. of vertices:");
	scanf("%d",&n);
	printf(" enter cost adjacency matrix:\n");
	for (i=1;i<=n;i++)
	for(j=1;j<=n;j++)
	scanf("%d",&cost[i][j]);
	r=prims(cost,n);
	printf("minimum cost:%d",r);
}

Input:
enter no. of vertices:7
 enter cost adjacency matrix:
0 28 99 99 99 10 99
28 0 16 99 99 99 14
99 16 0 12 99 99 99
99 99 12 0 22 99 18
99 99 99 22 0 25 24
10 99 99 99 25 0 99
99 14 99 18 24 99 0
Output:
minimum cost:99
