                DAA ASSIGNMENT
1.Mergesort
 
#include<stdio.h>
int b[20];
void merge(int a[],int l,int mid,int h)
{
	int i,j,k;
	i=l,j=mid+1,k=l;
	while((i<=mid)&&(j<=h))
	{
		if(a[i]<a[j])
		{
			b[k]=a[i];
			i++;
			k++;
		}
		else
		{
			b[k]=a[j];
			j++;
			k++;
		}
	}
	while(i<=mid)
	{
		b[k]=a[i];
		i++;
		k++;
	}
	while(j<=h)
	{
		b[k]=a[j];
		j++;
		k++;
	}
	for(k=l;k<=h;k++)
	a[k]=b[k];
	
}
void mergesort(int a[],int l,int h)
{
	int mid;
	if(l<h)
	{
		mid=(l+h)/2;
		mergesort(a,l,mid);
		mergesort(a,mid+1,h);
    	merge(a,l,mid,h);
	}	
}
int main()
{
	int i,n;
	printf("enter n value:");
	scanf("%d",&n);
	int a[n];
	printf("enter array elements:");
	for(i=0;i<n;i++)
	scanf("%d",&a[i]);
	mergesort(a,0,n-1);
	printf("after mergesort:");
	for(i=0;i<n;i++)
	printf("%d  ",a[i]);
}
Output:
enter n value:5
enter array elements:76 23 54 12 32
after mergesort:12  23  32  54  76

2.Quicksort

#include<stdio.h>
int a[30];
void swap(int i,int j)
{
	int t;
	t=a[i];
	a[i]=a[j];
	a[j]=t;
}
int partition(int a[],int l,int h)
{
	int i,j,piv,t;
	i=l,j=h,piv=a[l];
	while(i<j)
	{
		while(a[i]<=piv)
			i++;
		while(a[j]>piv)
			j--;
		if(i<j)
			swap(i,j);
	}
	swap(l,j);		
	return j;
}
void quicksort(int m,int n)
{
	int j;
	if(m<n)
	{
		j=partition(a,m,n);
		quicksort(m,j-1);
		quicksort(j+1,n);
	}
}
int main()
{
	int x,i;
	printf("enter x value:");
	scanf("%d",&x);
	printf("enter array elements:");
	for(i=0;i<x;i++)
	scanf("%d",&a[i]);
	quicksort(0,x-1);
	printf("after quick sort:");
	for(i=0;i<x;i++)
	printf("%d ",a[i]);
}
Output:
enter x value:7
enter array elements:7 3 8 2 6 1 9
after quick sort:1 2 3 6 7 8 9

3.Knapsack
 #include<stdio.h>
float r=0.0;
float knap(float p[20],float w[20],int m,int n)
{
	int u=m,i;
	float x[n];
	for(i=0;i<n;i++)
	x[i]=0.0;
	for(i=0;i<n;i++)
	{
		if(w[i]>u)
		break;
		x[i]=1.0;
		u=u-w[i];
	}
	if(i<=n)
	x[i]=(float)u/w[i];
	for(i=0;i<n;i++)
	r=r+(x[i]*p[i]);
	return r;
}
int main()
{
	int m,n,i,j,t,temp;
	printf("enter m and n value:");
	scanf("%d %d",&m,&n);
	float p[n],w[n],res[n];
	printf("enter profits:");
	for(i=0;i<n;i++)
		scanf("%f",&p[i]);
	printf("enter weights:");
	for(i=0;i<n;i++)
		scanf("%f",&w[i]);
	for(i=0;i<n;i++)
	res[i]=(p[i]/w[i]);
	for(i=0;i<n-1;i++){
	for(j=0;j<n-i-1;j++)
	{
		if(res[j]<res[j+1])
		{
			t=p[j];
			p[j]=p[j+1];
			p[j+1]=t;
			temp=res[j];
			res[j]=res[j+1];
			res[j+1]=temp;
			t=w[j];
			w[j]=w[j+1];
			w[j+1]=t;
			
		}
	}
	}	
	r=knap(p,w,m,n);
	printf("result:%f",r);
}
Output:
enter m and n value:20 3
enter profits:25 24 15
enter weights:18 15 10
result:31.500000

4.Tree Vertex Splitting
#include<stdio.h>
int d[20],n,a[20],w[20];
int max(int a,int b)
{
	if(a>b)
	return a;
	else
	return b;
}
void tvs(int i,int delta)
{
	if(a[i]!=0)
	{
		if((2*i)>n)
		d[i]=0;
		else
		{
			tvs((2*i),delta);
			d[i]=max(d[i],d[2*i]+w[2*i]);
			if(((2*i)+1)<=n)
			{
				tvs((2*i)+1,delta);
				d[i]=max(d[i],d[(2*i)+1]+w[(2*i)+1]);
			}		
		}
		if((a[i]!=1)&&(d[i]+w[i]>delta))
		{
			printf("booster:%d\n",a[i]);
			d[i]=0;
		}
	}
}
int main()
{
	int i,delta;
	printf("enter n value:");
	scanf("%d",&n);
	printf("enter array elements:");
	for(i=1;i<=n;i++)
		scanf("%d",&a[i]);
	printf("enter weights:");
	for(i=1;i<=n;i++)
	{
		scanf("%d",&w[i]);
		d[i]=0;
	}	
	printf("enter tolerance level:");
	scanf("%d",&delta);
	tvs(1,delta);
}
Output:
enter n value:15
enter array elements:1 2 3 4 0 5 6 7 8 0 0 0 0 9 10
enter weights:0 4 2 2 0 1 3 1 4 0 0 0 0 2 3
enter tolerance level:5
booster:4
booster:2
booster:6

5.Job Sequence with Deadlines
#include<stdio.h>
int d[20],p[20],jobs[20],n;
void jsn()
{
	int j[20],i,r,q,k,sum=0;
	d[0]=j[0]=0;
	j[1]=1;
	k=1;
	for(i=2;i<=n;i++)
	{
		r=k;
		while(d[j[r]]>=d[i]&&d[j[r]]!=r)
		r--;
		if(d[j[r]]<=d[i]&&d[i]>r)
		{
			for(q=k;q>=r+1;q--){
			j[q+1]=j[q];}
			j[r+1]=i;
			k++;
		}
	}
	for(i=1;i<=k;i++)
	{
		sum=sum+p[j[i]];
		printf("%d\n",jobs[j[i]]);
	}
	printf("\nprofit=%d",sum);	
}
int main()
{
	int i,t,j;
	printf("enter number of jobs:");
	scanf("%d",&n);
	printf("enter deadlines:");
	for(i=1;i<=n;i++)
	{
		scanf("%d",&d[i]);
		jobs[i]=i;
	}
	printf("enter profits:");
	for(i=1;i<=n;i++)
	scanf("%d",&p[i]);
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=n-i;j++)
		{
			if(p[j]<p[j+1])
			{
				t=p[j];
				p[j]=p[j+1];
				p[j+1]=t;
				t=d[j];
				d[j]=d[j+1];
				d[j+1]=t;
				t=jobs[j];
				jobs[j]=jobs[j+1];
				jobs[j+1]=t;
			}
		}
	}
	jsn();
}
Output:
enter number of jobs:7
enter deadlines:1 3 4 3 2 1 2
enter profits:3 5 20 18 1 6 30
6
7
4
3

profit=74.
